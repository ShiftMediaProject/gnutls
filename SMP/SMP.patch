diff --git a/lib/accelerated/x86/x86-common.c b/lib/accelerated/x86/x86-common.c
index 3845c6b4c..a1111a6f3 100644
--- a/lib/accelerated/x86/x86-common.c
+++ b/lib/accelerated/x86/x86-common.c
@@ -40,6 +40,35 @@
 #include <aes-padlock.h>
 #ifdef HAVE_CPUID_H
 # include <cpuid.h>
+#elif defined(_MSC_VER)
+#define HAVE_GET_CPUID_COUNT
+#include <intrin.h>
+static __inline int
+__get_cpuid(unsigned int __leaf,
+	unsigned int* __eax, unsigned int* __ebx,
+	unsigned int* __ecx, unsigned int* __edx)
+{
+	int regs[4];
+	__cpuid(regs, __leaf);
+	*__eax = (uint32_t)regs[0];
+	*__ebx = (uint32_t)regs[1];
+	*__ecx = (uint32_t)regs[2];
+	*__edx = (uint32_t)regs[3];
+	return 1;
+}
+static __inline int
+__get_cpuid_count(unsigned int __leaf, unsigned int __subleaf,
+	unsigned int* __eax, unsigned int* __ebx,
+	unsigned int* __ecx, unsigned int* __edx)
+{
+	int regs[4];
+	__cpuidex(regs, __leaf, __subleaf);
+	*__eax = (uint32_t)regs[0];
+	*__ebx = (uint32_t)regs[1];
+	*__ecx = (uint32_t)regs[2];
+	*__edx = (uint32_t)regs[3];
+	return 1;
+}
 #else
 # define __get_cpuid(...) 0
 # define __get_cpuid_count(...) 0
diff --git a/lib/datum.h b/lib/datum.h
index 35b9e3b97..e19211146 100644
--- a/lib/datum.h
+++ b/lib/datum.h
@@ -48,7 +48,7 @@ void _gnutls_free_datum(gnutls_datum_t * dat)
 	}
 }
 
-inline static ATTRIBUTE_NONNULL()
+inline static ATTRIBUTE_NONNULL((1))
 void _gnutls_free_temp_key_datum(gnutls_datum_t * dat)
 {
 	if (dat->data != NULL) {
@@ -59,7 +59,7 @@ void _gnutls_free_temp_key_datum(gnutls_datum_t * dat)
 	dat->size = 0;
 }
 
-inline static ATTRIBUTE_NONNULL()
+inline static ATTRIBUTE_NONNULL((1))
 void _gnutls_free_key_datum(gnutls_datum_t * dat)
 {
 	if (dat->data != NULL) {
diff --git a/lib/debug.c b/lib/debug.c
index 166dd61ca..bb81ddce4 100644
--- a/lib/debug.c
+++ b/lib/debug.c
@@ -31,7 +31,11 @@
 void _gnutls_dump_mpi(const char *prefix, bigint_t a)
 {
 	char buf[400];
+#if defined(_MSC_VER)
+	char* buf_hex = (char*)_alloca((2 * sizeof(buf) + 1) * sizeof(char));
+#else
 	char buf_hex[2 * sizeof(buf) + 1];
+#endif
 	size_t n = sizeof buf;
 
 	if (_gnutls_mpi_print(a, buf, &n))
@@ -44,7 +48,11 @@ void _gnutls_dump_mpi(const char *prefix, bigint_t a)
 void
 _gnutls_dump_vector(const char *prefix, const uint8_t * a, size_t a_size)
 {
+#if defined(_MSC_VER)
+	char * buf_hex = (char *)_alloca((2 * a_size + 1)*sizeof(char));
+#else
 	char buf_hex[2 * a_size + 1];
+#endif
 
 	_gnutls_debug_log("Vector: length: %d\n\t%s%s\n", (int) a_size,
 			  prefix, _gnutls_bin2hex(a, a_size, buf_hex,
diff --git a/lib/global.c b/lib/global.c
index 9a65d114c..46d2b1a4f 100644
--- a/lib/global.c
+++ b/lib/global.c
@@ -46,11 +46,32 @@
 #ifdef __sun
 # pragma fini(lib_deinit)
 # pragma init(lib_init)
-# define _CONSTRUCTOR
-# define _DESTRUCTOR
+# define CONSTRUCTOR_ATTRIBUTE(_func) static void _func(void);
+# define DESTRUCTOR_ATTRIBUTE(_func) static void _func(void);
+#elif defined(_WIN32) && defined(_MSC_VER)
+# define CONSTRUCTOR_ATTRIBUTE_(_func,p) static void _func(void); \
+	static int _func ## _wrapper(void) { _func(); return 0; } \
+	__pragma(section(".CRT$XCU",read)) \
+	__declspec(allocate(".CRT$XCU")) int (* _func##_)(void) = _func ## _wrapper; \
+	__pragma(comment(linker,"/include:" p #_func "_"))
+#ifdef _WIN64
+# define CONSTRUCTOR_ATTRIBUTE(f) CONSTRUCTOR_ATTRIBUTE_(f,"")
 #else
-# define _CONSTRUCTOR __attribute__((constructor))
-# define _DESTRUCTOR __attribute__((destructor))
+# define CONSTRUCTOR_ATTRIBUTE(f) CONSTRUCTOR_ATTRIBUTE_(f,"_")
+#endif
+# define DESTRUCTOR_ATTRIBUTE_(_func,p) static void _func(void); \
+	static int _func ## _constructor(void) { atexit (_func); return 0; } \
+	__pragma(section(".CRT$XCU",read)) \
+	__declspec(allocate(".CRT$XCU")) int (* _func##_)(void) = _func ## _constructor; \
+	__pragma(comment(linker,"/include:" p #_func "_"))
+#ifdef _WIN64
+#define DESTRUCTOR_ATTRIBUTE(f) DESTRUCTOR_ATTRIBUTE_(f,"")
+#else
+#define DESTRUCTOR_ATTRIBUTE(f) DESTRUCTOR_ATTRIBUTE_(f,"_")
+#endif
+#else
+# define CONSTRUCTOR_ATTRIBUTE(_func) static void _func(void) __attribute__((constructor))
+# define DESTRUCTOR_ATTRIBUTE(_func) static void _func(void) __attribute__((destructor))
 #endif
 
 #ifndef _WIN32
@@ -493,7 +514,8 @@ const char *gnutls_check_version(const char *req_version)
 	return NULL;
 }
 
-static void _CONSTRUCTOR lib_init(void)
+CONSTRUCTOR_ATTRIBUTE(lib_init);
+static void lib_init(void)
 {
 int ret;
 const char *e;
@@ -515,7 +537,8 @@ const char *e;
 	}
 }
 
-static void _DESTRUCTOR lib_deinit(void)
+DESTRUCTOR_ATTRIBUTE(lib_deinit);
+static void lib_deinit(void)
 {
 	const char *e;
 
diff --git a/lib/includes/gnutls/gnutls.h.in b/lib/includes/gnutls/gnutls.h.in
index 264da238a..8a177bb88 100644
--- a/lib/includes/gnutls/gnutls.h.in
+++ b/lib/includes/gnutls/gnutls.h.in
@@ -38,7 +38,12 @@
 #define GNUTLS_H
 
 /* Get ssize_t. */
+#ifdef _MSC_VER
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
+#else
 #include <sys/types.h>
+#endif
 
 /* Get size_t. */
 #include <stddef.h>
diff --git a/lib/system/fastopen.c b/lib/system/fastopen.c
index 8d8409e48..6b0fa7d49 100644
--- a/lib/system/fastopen.c
+++ b/lib/system/fastopen.c
@@ -26,7 +26,9 @@
 #include "errors.h"
 
 #include <sys/socket.h>
+#ifndef _MSC_VER
 #include <netinet/in.h> /* IPPROTO_TCP */
+#endif
 #include <errno.h>
 #include <sys/stat.h>
 #include <sys/types.h>
diff --git a/lib/x509/hostname-verify.c b/lib/x509/hostname-verify.c
index 6ef8ba030..378b29c90 100644
--- a/lib/x509/hostname-verify.c
+++ b/lib/x509/hostname-verify.c
@@ -26,8 +26,10 @@
 #include <common.h>
 #include "errors.h"
 #include <system.h>
+#ifndef _MSC_VER
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#endif
 
 /**
  * gnutls_x509_crt_check_hostname:
diff --git a/lib/x509/ip.c b/lib/x509/ip.c
index c4cb00831..a3be0d2b0 100644
--- a/lib/x509/ip.c
+++ b/lib/x509/ip.c
@@ -24,7 +24,9 @@
 #include "gnutls_int.h"
 #include "ip.h"
 #include <gnutls/x509.h>
+#ifndef _MSC_VER
 #include <arpa/inet.h>
+#endif
 
 /*-
  * _gnutls_mask_to_prefix:
